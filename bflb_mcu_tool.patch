diff -Naur a/bflb_mcu_tool/core/bflb_mcu_tool.py b/bflb_mcu_tool/core/bflb_mcu_tool.py
--- a/bflb_mcu_tool/core/bflb_mcu_tool.py	2022-11-24 07:19:53.000000000 +0100
+++ b/bflb_mcu_tool/core/bflb_mcu_tool.py	2022-12-28 02:32:50.613439311 +0100
@@ -106,11 +106,11 @@
         self.efuse_load_en = False
         self.eflash_loader_cfg = os.path.join(chip_path, chipname,
                                               "eflash_loader/eflash_loader_cfg.conf")
-        self.eflash_loader_cfg_tmp = os.path.join(chip_path, chipname,
-                                                  "eflash_loader/eflash_loader_cfg.ini")
+        self.eflash_loader_cfg_tmp = os.path.join("/tmp",
+                                                  "eflash_loader_cfg.ini")
         self.eflash_loader_bin = os.path.join(chip_path, chipname,
                                               "eflash_loader/eflash_loader_40m.bin")
-        self.img_create_path = os.path.join(chip_path, chipname, "img_create_mcu")
+        self.img_create_path = "/tmp/img_create_mcu"
         self.efuse_bh_path = os.path.join(chip_path, chipname, "efuse_bootheader")
         self.efuse_bh_default_cfg = os.path.join(chip_path, chipname,
                                                  "efuse_bootheader") + "/efuse_bootheader_cfg.conf"
@@ -120,8 +120,7 @@
                                                "img_create_mcu") + "/img_create_cfg.conf"
         self.img_create_cfg_dp_org = os.path.join(chip_path, chipname,
                                                   "img_create_mcu") + "/img_create_cfg_dp.conf"
-        self.img_create_cfg = os.path.join(chip_path, chipname,
-                                           "img_create_mcu") + "/img_create_cfg.ini"
+        self.img_create_cfg = "/tmp/img_create_cfg.ini"
         if not os.path.exists(self.img_create_path):
             os.makedirs(self.img_create_path)
         if os.path.isfile(self.eflash_loader_cfg_tmp) is False:
@@ -1881,6 +1880,8 @@
         options = ""
         ret = None
         create_output_path = os.path.relpath(self.img_create_path, app_path)
+        #create_output_path = "/tmp"
         group0_used = False
         group1_used = False
         group0_img_start = 0xFFFFFFFF
diff -Naur a/bflb_mcu_tool/libs/bflb_efuse_boothd_create.py b/bflb_mcu_tool/libs/bflb_efuse_boothd_create.py
--- a/bflb_mcu_tool/libs/bflb_efuse_boothd_create.py	2022-11-24 03:35:50.000000000 +0100
+++ b/bflb_mcu_tool/libs/bflb_efuse_boothd_create.py	2022-12-28 02:18:47.855161527 +0100
@@ -110,7 +110,7 @@
 
 
 def bootheader_create_do(chipname, chiptype, config_file, section, output_file=None, if_img=False):
-    efuse_bootheader_path = os.path.join(chip_path, chipname, "efuse_bootheader")
+    efuse_bootheader_path = "/tmp"
     try:
         bflb_utils.printf("Create bootheader using ", config_file)
         sub_module = __import__("libs." + chiptype, fromlist=[chiptype])
@@ -233,11 +233,11 @@
 
 
 def efuse_create_process(chipname, chiptype, config_file, output_file=None):
-    efuse_bootheader_path = os.path.join(chip_path, chipname, "efuse_bootheader")
+    efuse_bootheader_path = "/tmp"
     eflash_loader_path = os.path.join(chip_path, chipname, "eflash_loader")
     filedir = ""
     bflb_utils.printf("Create efuse using ", config_file)
-    cfgfile = eflash_loader_path + "/eflash_loader_cfg.ini"
+    cfgfile = "/tmp/eflash_loader_cfg.ini"
     if os.path.isfile(cfgfile) is False:
         shutil.copyfile(eflash_loader_path + "/eflash_loader_cfg.conf", cfgfile)
     cfg = BFConfigParser()
diff -Naur a/bflb_mcu_tool/libs/bflb_img_create.py b/bflb_mcu_tool/libs/bflb_img_create.py
--- a/bflb_mcu_tool/libs/bflb_img_create.py	2022-11-24 03:35:51.000000000 +0100
+++ b/bflb_mcu_tool/libs/bflb_img_create.py	2022-12-28 02:37:59.486260353 +0100
@@ -77,7 +77,8 @@
 def compress_dir(chipname, zippath, efuse_load=False):
     zip_file = os.path.join(chip_path, chipname, zippath, "whole_img.pack")
     dir_path = os.path.join(chip_path, chipname, chipname)
-    cfg_file = os.path.join(chip_path, chipname, "eflash_loader/eflash_loader_cfg.ini")
+    #cfg_file = os.path.join(chip_path, chipname, "eflash_loader/eflash_loader_cfg.ini")
+    cfg_file = "/tmp/eflash_loader_cfg.ini"
     cfg = BFConfigParser()
     cfg.read(cfg_file)
     flash_file = re.compile('\s+').split(cfg.get("FLASH_CFG", "file"))
@@ -99,6 +100,7 @@
                 relpath = os.path.relpath(os.path.join(app_path, convert_path(flash_file[i])),
                                           chip_path)
                 dir = os.path.join(chip_path, chipname, relpath)
+                print("%r, %r, %r" % (relpath, dir, chip_path))
                 if os.path.isdir(os.path.dirname(dir)) is False:
                     os.makedirs(os.path.dirname(dir))
                 shutil.copyfile(os.path.join(app_path, convert_path(flash_file[i])), dir)
@@ -106,11 +108,13 @@
             verfile = os.path.join(chip_path, chipname, chipname, "version.txt")
             with open(verfile, mode="w") as f:
                 f.write(time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
-        except Exception as e:
-            bflb_utils.printf(e)
-            factory_mode_set(os.path.join(chipname, "eflash_loader/eflash_loader_cfg.ini"),
-                             "false")
-            return False
+        finally:
+            pass
+        #except Exception as e:
+        #    bflb_utils.printf(e)
+        #    factory_mode_set(os.path.join(chipname, "eflash_loader/eflash_loader_cfg.ini"),
+        #                     "false")
+        #    return False
 
     try:
         z = zipfile.ZipFile(zip_file, 'w')
